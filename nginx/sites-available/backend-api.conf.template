# ===========================================
# Backend API Service Template
# Replace:
# - SERVICE_NAME with actual service name
# - CLIENT_DOMAIN with actual client domain
# - BACKEND_PORT with actual backend port
# ===========================================

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name SERVICE_NAME.CLIENT_DOMAIN;
    return 301 https://$host$request_uri;
}

# Backend API Service
server {
    listen 443 ssl http2;
    server_name SERVICE_NAME.CLIENT_DOMAIN;

    # Limits
    client_max_body_size 50M;
    client_body_timeout 60s;
    client_header_timeout 60s;

    # SSL configuration
    include /etc/nginx/options-ssl-nginx.conf;

    # Logs
    access_log /var/log/nginx/SERVICE_NAME.access.log;
    error_log /var/log/nginx/SERVICE_NAME.error.log;

    # Rate limiting
    limit_req zone=api burst=30 nodelay;
    limit_conn conn_limit_per_ip 20;

    # Security headers
    add_header X-Frame-Options DENY always;

    # Backend API
    location / {
        proxy_pass http://localhost:BACKEND_PORT;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 600s;
        proxy_connect_timeout 60s;
        proxy_send_timeout 600s;
        
        # CORS headers (adapt allowed origins as needed)
        set $cors_origin "";
        if ($http_origin ~* ^https?://(SERVICE_NAME\.CLIENT_DOMAIN|localhost:8080|127\.0\.0\.1:8080)$) {
            set $cors_origin $http_origin;
        }
        
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, X-Requested-With" always;
        
        # Handle preflight OPTIONS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Cache-Control, Content-Type, X-Requested-With" always;
            add_header Access-Control-Max-Age 3600 always;
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }
    }
}