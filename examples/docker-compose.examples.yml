# ===========================================
# Exemples de services Docker Compose
# ===========================================
# Copiez les services dont vous avez besoin
# dans votre docker-compose.yml principal

version: '3.8'

services:
  # ========================================
  # N8N - Automation Platform
  # ========================================
  n8n:
    image: n8nio/n8n:latest
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    environment:
      N8N_HOST: ${N8N_HOST}
      WEBHOOK_URL: https://${N8N_HOST}/
      N8N_PORT: 5678
      N8N_PROTOCOL: https
      GENERIC_TIMEZONE: ${TIMEZONE:-Europe/Paris}
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: ${N8N_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD}
    env_file:
      - .env
    volumes:
      - n8n_data:/home/node/.n8n

  # ========================================
  # Backend API Node.js
  # ========================================
  backend-api:
    build:
      context: ./services/client-backend/
      dockerfile: Dockerfile
    restart: always
    ports:
      - "127.0.0.1:3001:3001"
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
    env_file:
      - .env
    volumes:
      - api_uploads:/app/uploads
    depends_on:
      - database

  # ========================================
  # MongoDB Database
  # ========================================
  database:
    image: mongo:6
    restart: always
    ports:
      - "127.0.0.1:27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-clientdb}
    volumes:
      - mongo_data:/data/db

  # ========================================
  # PostgreSQL Database
  # ========================================
  postgres:
    image: postgres:15-alpine
    restart: always
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-clientdb}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # ========================================
  # Redis Cache
  # ========================================
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data

  # ========================================
  # Frontend Dev Server (pour développement)
  # ========================================
  frontend-dev:
    build:
      context: ./services/client-frontend/
      dockerfile: Dockerfile.dev
    volumes:
      - ./services/client-frontend:/app
      - /app/node_modules
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3001
    command: npm run dev

  # ========================================
  # Scraping Service avec VNC
  # ========================================
  scraping-service:
    build:
      context: ./services/scraping/
      dockerfile: Dockerfile
    restart: always
    ports:
      - "127.0.0.1:3000:3000"  # API
      - "127.0.0.1:5900:5900"  # VNC
    environment:
      NODE_ENV: production
      PUPPETEER_EXECUTABLE_PATH: /usr/bin/chromium
      PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: "true"
    volumes:
      - scraping_data:/app/data

  # NoVNC pour accès web au VNC
  novnc:
    image: theasp/novnc:latest
    restart: always
    ports:
      - "127.0.0.1:6080:6080"
    environment:
      - DISPLAY_WIDTH=1600
      - DISPLAY_HEIGHT=900
      - VNC_SERVER=scraping-service:5900
    depends_on:
      - scraping-service

# ========================================
# Volumes
# ========================================
volumes:
  n8n_data:
    driver: local
  
  mongo_data:
    driver: local
  
  postgres_data:
    driver: local
  
  redis_data:
    driver: local
  
  api_uploads:
    driver: local
  
  scraping_data:
    driver: local